<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on 记得</title>
    <link>https://www.syst.top/tags/go/</link>
    <description>Recent content in go on 记得</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Wed, 21 Apr 2021 23:54:52 +0800</lastBuildDate><atom:link href="https://www.syst.top/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>在Go中高频犯过的错 </title>
      <link>https://www.syst.top/posts/go/mistake/</link>
      <pubDate>Wed, 21 Apr 2021 23:54:52 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/mistake/</guid>
      <description>在迭代器变量上使用goroutine 我们来看一段代码
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; ) type User struct { userId int } func main() { var userList []User for i := 0; i &amp;lt; 10; i++ { userList = append(userList, User{userId: i}) } var wg sync.WaitGroup for i, _ := range userList { wg.Add(1) go func() { defer wg.Done() Do(userList[i]) }() } wg.Wait() } func Do(user User) { fmt.Printf(&amp;#34;用户id:%v\n&amp;#34;, user.userId) } 一个很简单的利用 sync.waitGroup 做任务编排的场景，看一下好像没啥问题，运行看看结果。
啥情况，为啥不是1-9(当然不是顺序的)。
原因很简单，循环器中的 i 实际上是一个单变量，go func 里的闭包只绑定在一个变量上， 每个 goroutine 可能要等到循环结束才真正的运行，这时候运行的 i 值大概率就是 9了。 大概率的意思是没人能保证这个过程，有的只是手段。</description>
    </item>
    
    <item>
      <title>使用 Go 每分钟处理百万请求 </title>
      <link>https://www.syst.top/posts/go/handle-million-requests/</link>
      <pubDate>Mon, 05 Apr 2021 22:25:52 +0800</pubDate>
      
      <guid>https://www.syst.top/posts/go/handle-million-requests/</guid>
      <description>介绍 偶然间看到一篇写于15年的文章，说实话，标题确实吸引了我，不过看了几遍之后，确实精彩。 关于这篇文章，我就不直接翻译了。 项目的需求就是 客户端发送请求，服务端接收请求处理数据(原文是把资源上传至 Amazon S3 资源中)。本质上就是这样, 我稍微改动了原文的业务代码，但是并不影响核心模块。在第一版中，每收到一个 Request,开启一个 G 进行处理，快速响应，很常规的操作。
代码如下
初版 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;time&amp;#34; ) type Payload struct { // 传啥不重要 } func (p *Payload) UpdateToS3() error { //存储逻辑,模拟操作耗时 	time.Sleep(500 * time.Millisecond) fmt.Println(&amp;#34;上传成功&amp;#34;) return nil } func payloadHandler(w http.ResponseWriter, r *http.Request) { // 业务过滤 	// 请求body解析...... 	var p Payload go p.UpdateToS3() w.Write([]byte(&amp;#34;操作成功&amp;#34;)) } func main() { http.HandleFunc(&amp;#34;/payload&amp;#34;, payloadHandler) log.Fatal(http.ListenAndServe(&amp;#34;:8099&amp;#34;, nil)) } 这样操作存在什么问题呢？一般情况下，没什么问题。但是如果是高并发的场景下，不对G数进行控制，你的 CPU 使用率暴涨，内存占用暴涨，直至程序奔溃。</description>
    </item>
    
  </channel>
</rss>
